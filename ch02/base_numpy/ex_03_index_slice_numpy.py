import numpy as np
"""

切片
a = np.arange(10)
s = slice(2,7,2)   # 从索引 2 开始到索引 7 停止，间隔为2
print (a[s])

也可以通过冒号分隔切片参数 start:stop:step 来进行切片操作
冒号 : 的解释：
如果只放一个冒号，如[:]，将返回整个数组，意味着全选。如arr[:, 1:]#取二维数组的第二列到最后的所有元素
如果只放置一个参数，如 [2]，将返回与该索引相对应的单个元素。
如果为 [2:]，表示从该索引开始以后的所有项都将被提取。
如果使用了两个参数，如 [2:7]，那么则提取两个索引(不包括停止索引)之间的项。

a = np.array([[1,2,3],[3,4,5],[4,5,6]])
print(a)
# 从某个索引处开始切割
print('从数组索引 a[1:] 处开始切割')
切片还可以包括省略号 …，来使选择元组的长度与数组的维度相同。 
a = np.array([[1,2,3],[3,4,5],[4,5,6]])  
print (a[...,1])   # 第2列元素
print (a[1,...])   # 第2行元素
print (a[...,1:])  # 第2列及剩下的所有元素



基本索引：通过单个整数值来索引数组
    索引一维数组：
        通过整数值索引一维数组中的单个元素值
            arr = np.arange(9)
            print(arr[2]) 
    索引二维数组：
        通过整数值索引二维数组中的数组子集
            arr2d = np.arange(9).reshape(3, 3)
            print(arr2d[0])
        通过整数值索引二维数组中的单个元素值
            print(arr2d[0,2])

切片索引：通过[start: end: steps]（起始位置为start，终止位置为end，步长为steps）的方式索引连续的数组子集
    arr2d = np.arange(9).reshape(3, 3)
    print(arr2d) # [[0 1 2] [3 4 5] [6 7 8]]
    print(arr2d[:, 0]) # [0 3 6]
    print(arr2d[::2, :]) # [[0 1 2] [6 7 8]] 

布尔索引：通过布尔类型的数组进行索引
    names = np.array(['Bob', 'Joe', 'Will'])
    scores = np.random.randint(0, 100, (3, 4)) # 3名学生的4科成绩
    print(names == 'Bob')
    print(scores[names == 'Bob']) # 获取Bob的四科成绩



花式索引：根据索引整型数组的值作为目标数组的某个轴的下标来取值。
        既然是整数数组作为下标，这就要求如果设置多个整数数组来索引的话，这些整数数组的元素个数要相等，这样才能够将整数数组映射成下标。
    索引一维数组：
        arr = np.arange(9)
        arr2 = arr[[0, 2]]
        print(arr2)

        print(arr2[0])
        print(arr2[1])
        对于一维数组只有一个轴axis = 0，因此我们只能设置一个整型数组并且整型数组只能作用在axis = 0这个轴上；
        下标其实也很好理解，对于整数数组为[0, 2]，可以简单理解0和2分别是arr数组的下标，即arr[0]和arr[2]，
            花式索引arr[[0, 2]]结果中的元素值和单独对arr[0]以及arr[2]进行索引的元素值是一致的。
    索引二维数组：
        arr2d = np.arange(9).reshape(3, 3)
        arr2d2 = arr2d[[0, 2]] # 使用花式索引
        print(arr2d2)

        print(arr2d[0]) 
        print(arr2d[2])
        对于二维数组来说一共有两个维度两个轴axis = 0、axis = 1，由于此时整数数组只有一个，此时由于花式索引中只有一个数组，
            所以此时的索引数组只能作用在axis = 0的这个轴上；
        由于这里只有一个数组所以下标的理解和在一维数组中类似，对于[0, 2]来说，对应的下标索引为arr2d[0]、arr2d[2]，
            对于二维数组相应的索引结果为二维数组arr2中的第一行和第三行；



        一个整数数组能够索引一个轴，那么对于二维数组来说，如果有两个整数数组的话肯定能够索引相对应的两个轴。
        接下来我们再为二维数组添加一个整数数组[1, 2]。​
        arr2d2 = arr2d[[0, 2], [1, 2]] # 使用花式索引
        print(arr2d2)
        二维数组一共有两个轴，此时的整数数组刚好有两个，所以两个整数数组会作用在二维数组中的两个轴上；
        由于二维数组的两个轴都被索引了，所以此时的下标和上面的稍有不同，对于[0, 2]和[1, 2]两个整数数组来说，
            相应的下标先在第一个整数数组中选择0，然后再在第二个整数数组中选择1，即为arr2d[0][0]等价arr2d[0, 0]，
            同理对于第二个索引来说先在第一个整数数组中选择2，然后再第二个整数数组中选择2，即为arr2d[2][2]等价arr2d[2, 2]。
            这也从侧面证明了为什么花式索引会要求在给定轴上的整数数组元素个数要相等；

        简单总结一下，一个整数数组作用在待索引数组中的一个轴上，因此整数数组的个数要小于等于待索引数组的维度个数，
            对于下标来说，花式索引本质上可以转换为基本索引，所以要求整数数组中的元素值不能超过对应待索引数组的最大索引。

        花式索引擅长一些不规则的索引，这些不​规则的索引使用其它的索引方式可能也可以实现，但是相比于花式索引实现会比较复杂。​

        https://zhuanlan.zhihu.com/p/123858781




    多维数组索引
        arr3d = np.arange(24).reshape(2, 3, 4)
        # 三个一维索引数组。每个维度的索引数组共同确定一个元素，结果形状与索引数组一致。
        x = np.array([0, 1])
        y = np.array([1, 2])
        z = np.array([2, 3])
        print(arr3d[x, y, z])  # 输出：[ 6 23]






"""





"""
题目一：简单索引（一维数组）
创建数组arr = np.array([10, 20, 30, 40, 50])，打印第三个元素（值为30）。
"""
arr = np.array([10, 20, 30, 40, 50])
print(arr[2])




"""
题目二：简单切片（一维数组）
数组：arr = np.array([1, 2, 3, 4, 5, 6])
用切片取出数组中第2到第4个元素（值为2,3,4）。
"""
arr = np.array([1,2,3,4,5,6])
print(arr[1:4])




"""
题目三：负索引（一维数组）
给定数组：arr = np.array([100, 200, 300, 400, 500])，使用负索引取出最后两个元素。
"""
arr = np.array([100,200,300,400,500])
print(arr[-2:-1])
# 问题：切片 [-2:-1] 只取到倒数第二个元素（400），未取到最后一个元素（500）
print(arr[-2:]) #从倒数第二个到末尾




"""
题目四：二维数组索引
给定二维数组：
arr = np.array([[1, 2, 3], [4, 5, 6]])
打印第一行的第三个元素。
"""
arr = np.array([[1,2,3,], [4,5,6]])
print(arr[0][2])




"""
题目五：二维数组切片（取行）
给定二维数组：
arr = np.array([[10, 20], [30, 40], [50, 60]])
用切片取出前两行。
"""
arr = np.array([[10,20], [30,40], [50,60]])
print(f'切片取出前两行：\n{arr[0:2]}')




"""
题目六：二维数组切片（取列）
给定二维数组：
arr = np.array([[10, 20, 30], [40, 50, 60]])
用切片取出数组的最后两列。
"""
arr = np.array([[10,20,30], [40,50,60]])
print(f'结果{arr[..., 2]}', end='\n')
# 问题：arr[..., 2] 只取到最后一列（索引2），但题目要求取最后两列（索引1和2）。
print(arr[:,1:])




"""
题目七：二维数组切片（取子矩阵）
给定二维数组：
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
用切片取出数组的右下角2×2子矩阵。
"""
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(f'右下角2×2子矩阵\n{arr[1:,1:]}', end='\n')





"""
题目八：步长切片（一维数组）
给定数组：
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
使用步长为2的切片方式取出偶数索引位置的元素。
"""

arr = np.array([0,1,2,3,4,5,6,7,8,9])
print(arr[0:10:2])


"""
题目九：布尔索引
给定数组：
arr = np.array([5, 10, 15, 20, 25])
使用布尔索引打印出大于等于15的元素。
"""
arr = np.array([5, 10, 15, 20, 25])
print(arr[arr>=15],end='\n') #布尔索引





"""
题目十：复杂索引（二维数组）
给定数组：
arr = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])
取出第一行和最后一行的第2、3列元素。
"""
arr = np.array([[10,20,30], [40,50,60], [70,80,90]])
print(arr[[0,0,2,2],[1,2,1,2]])
#问题：你使用了整数数组索引，输出了一个一维数组，但题目要求取出二维子数组。

print(arr[[0, 2]][:, 1:])
#[[0,2]]代表x轴取第一行和最后一行，返回一个子数组[[10, 20, 30],[70, 80, 90]]
#[:, 1:]，这是切片操作，作用在刚刚得到的子数组上：
# : 表示选择所有行（即第 0 行和第 1 行）。
# 1: 表示从第 1 列（即第2列）开始，到最后一列（含）。



# 当直接使用多个一维数组对多维数组进行索引时，NumPy 默认会进行“广播”并返回一个一维结果。
# 但如果你希望得到一个多维结果（例如选择行和列的子矩阵），则需要使用 np.ix_ 生成索引网格。
# np.ix_ 函数就是输入两个数组，产生笛卡尔积的映射关系。
rows = [0,2]
cols = [1,2]
print(arr[np.ix_(rows, cols)])





